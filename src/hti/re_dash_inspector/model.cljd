(ns hti.re-dash-inspector.model
  (:require ["package:web/web.dart" :as web]
            ["package:vm_service/vm_service.dart" :as vm-service]
            ["package:devtools_app_shared/utils.dart" :as utils]
            [hti.re-dash.core :as rd]
            [cljd.reader :as r]
            [clojure.string :as string]))

(defn- handle-app-event
  [{{recording? :rd.inspector/recording?
     db-before  :rd.inspector/db
     app-events :rd.inspector/events

     {max-events :rd.inspector.setting/max-events}
     :rd.inspector/settings

     :as db} :db}
   [_ {:flds [extensionData] :as ^vm-service/Event _}]]

  (let [data   (some-> ^vm-service/ExtensionData extensionData .-data)
        app-db (-> (get data "db") r/read-string)]

    (if recording?

      (let [app-event-id (-> (get data "event-id") r/read-string)

            app-event {:rd.inspector.event/id        app-event-id
                       :rd.inspector.event/db-before db-before
                       :rd.inspector.event/db-after  app-db
                       :rd.inspector.event/number
                       (-> app-events first :rd.inspector.event/number ((fnil inc 0)))}

            app-events' (->> (conj app-events app-event)
                             (take max-events))]

        {:db                     (assoc db
                                        :rd.inspector/db app-db
                                        :rd.inspector/events app-events')
         :rd.inspector/calc-diff app-event})

      {:db (assoc db :rd.inspector/db app-db)})))


(defn- handle-worker-event
  [db [_ {worker-event-number :rd.inspector.event/number
          :as worker-event}]]

  (update db :rd.inspector/events
          (fn [app-events]
            (map (fn [{app-event-number :rd.inspector.event/number :as app-event}]
                   (if (= worker-event-number app-event-number)
                     worker-event
                     app-event))
                 app-events))))

(defn- calc-diff
  [event-dbs]

  (let [^web/Worker worker (get utils/globals web/Worker)]
    (.postMessage worker (prn-str event-dbs))))

(defn- set-search-text
  [db [_ search-text]]
  (assoc db :rd.inspector/search-text search-text))

(defn- clear-selected-path
  [db _]
  (assoc db
         :rd.inspector/selected-path []
         :rd.inspector/selected-path-error? false))

(defn- clear-events
  [db _]
  (assoc db :rd.inspector/events '()))

(defn- toggle-recording
  [db _]
  (update db :rd.inspector/recording? #(not %)))

(defn- toggle-selected-path-editable?
  [db _]
  (update db :rd.inspector/selected-path-editable? #(not %)))

(defn- update-selected-path
  [db [_ idx]]
  (-> (update db :rd.inspector/selected-path #(-> (inc idx) (take %) vec))
      (assoc :rd.inspector/search-text "")))

(defn- set-selected-path
  [db [_ selected-path]]
  (try
    (if (string/blank? selected-path)
      (assoc db :rd.inspector/selected-path-error? false)
      (let [selected-path' (r/read-string selected-path)]
        (if (vector? selected-path')
          (assoc db
                 :rd.inspector/selected-path selected-path'
                 :rd.inspector/selected-path-error? false)
          (assoc db :rd.inspector/selected-path-error? true))))
    (catch dynamic e
      (assoc db :rd.inspector/selected-path-error? true))))

(defn- update-selected-path-coll
  [db [_ id]]
  (-> (update db :rd.inspector/selected-path #(-> % vec (conj id)))
      (assoc :rd.inspector/search-text "")))

(defn- apply-settings
  [db [_ settings]]
  (assoc db :rd.inspector/settings settings))

(defn- initialize-db
  [_ _]
  {:rd.inspector/recording? false
   :rd.inspector/selected-path []
   :rd.inspector/selected-path-editable? false
   :rd.inspector/settings {:rd.inspector.setting/max-events 100
                           :rd.inspector.setting/hide-events-with-no-diff? false}})

(defn register!
  []

  (rd/reg-sub :rd.inspector/db :-> :rd.inspector/db)
  (rd/reg-sub :rd.inspector/selected-path :-> :rd.inspector/selected-path)
  (rd/reg-sub :rd.inspector/selected-path-error? :-> :rd.inspector/selected-path-error?)
  (rd/reg-sub :rd.inspector/selected-path-editable? :-> :rd.inspector/selected-path-editable?)
  (rd/reg-sub :rd.inspector/search-text :-> :rd.inspector/search-text)
  (rd/reg-sub :rd.inspector/recording? :-> :rd.inspector/recording?)
  (rd/reg-sub :rd.inspector/events :-> :rd.inspector/events)
  (rd/reg-sub :rd.inspector/settings :-> :rd.inspector/settings)

  (rd/reg-event-db :rd.inspector/initialize-db initialize-db)

  (rd/reg-event-db :rd.inspector/set-search-text set-search-text)

  (rd/reg-event-db :rd.inspector/apply-settings apply-settings)

  (rd/reg-event-db :rd.inspector/update-selected-path update-selected-path)
  (rd/reg-event-db :rd.inspector/update-selected-path-coll update-selected-path-coll)
  (rd/reg-event-db :rd.inspector/set-selected-path set-selected-path)
  (rd/reg-event-db :rd.inspector/clear-selected-path clear-selected-path)
  (rd/reg-event-db :rd.inspector/toggle-selected-path-editable? toggle-selected-path-editable?)

  (rd/reg-event-db :rd.inspector/clear-events clear-events)

  (rd/reg-event-db :rd.inspector/toggle-recording toggle-recording)

  (rd/reg-event-fx :rd.inspector/handle-app-event handle-app-event)
  (rd/reg-event-db :rd.inspector/handle-worker-event handle-worker-event)
  (rd/reg-fx :rd.inspector/calc-diff calc-diff))
