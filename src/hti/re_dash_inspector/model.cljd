(ns hti.re-dash-inspector.model
  (:require ["package:web/web.dart" :as web]
            ["package:vm_service/vm_service.dart" :as vm-service]
            ["dart:collection" :as coll]
            ["package:devtools_app_shared/utils.dart" :as utils]
            ["worker.dart" :as worker]
            [hti.re-dash.core :as rd]
            [cljd.reader :as r]
            [clojure.string :as string]))

(defonce ^:private ^coll/Queue events-queue
  (coll/Queue))

(defn find-available-worker
  [db]
  (->> (:rd.inspector/workers db)
       (filter (fn [[_worker-id {:keys [busy?]}]]
                 (not busy?)))
       first))

(defn dequeue-event
  [{:keys [db]} _]

  (when-let [[worker-id {:keys [worker]}]
             (find-available-worker db)]

    (when (.-isNotEmpty events-queue)

      {:db (update-in db [:rd.inspector/workers worker-id] assoc :busy? true)

       :rd.inspector.fx/delegate-to-worker
       {:worker worker
        :data   (.removeLast events-queue)}})))

(defn- enqueue
  "Adds event to queue and purge events exceeding queue max size"
  [{data :data
    {max-events :rd.inspector.setting/max-events} :settings}]
  (.add events-queue data)
  (while (> (.-length events-queue) max-events)
    (.removeFirst events-queue)))

(defn- handle-app-event
  [{{recording? :rd.inspector/recording?
     db-before  :rd.inspector/db
     app-events :rd.inspector/events

     {max-events :rd.inspector.setting/max-events :as settings}
     :rd.inspector/settings

     :as db} :db}
   [_ {:flds [extensionData] :as ^vm-service/Event _}]]

  (let [data   (some-> ^vm-service/ExtensionData extensionData .-data)
        app-db (-> (get data "db") r/read-string)]

    (if recording?

      (let [app-event-id (-> (get data "event-id") r/read-string)

            app-event {:rd.inspector.event/id        app-event-id
                       :rd.inspector.event/db-before db-before
                       :rd.inspector.event/db-after  app-db
                       :rd.inspector.event/number
                       (-> app-events first :rd.inspector.event/number ((fnil inc 0)))}

            app-events' (->> (conj app-events app-event)
                             (take max-events))]

        {:db                     (assoc db
                                        :rd.inspector/db app-db
                                        :rd.inspector/events app-events')

         :rd.inspector.fx/enqueue {:data app-event :settings settings}})

      {:db (assoc db :rd.inspector/db app-db)})))


(defn- handle-worker-event
  [{{current-events :rd.inspector/events
     :as            db}
    :db}

   [_ {worker-id :worker-id
       {worker-event-number :rd.inspector.event/number
        :as                 worker-event}
       :data}]]

  (let [apply-changes?
        (>= worker-event-number (-> current-events last :rd.inspector.event/number))]

    {:db (-> (update db :rd.inspector/events
                     (fn [app-events]
                       (if apply-changes?
                         (map (fn [{app-event-number :rd.inspector.event/number :as app-event}]
                                (if (= worker-event-number app-event-number)
                                  worker-event
                                  app-event))
                              app-events)

                         app-events)))
             (update-in [:rd.inspector/workers worker-id] assoc :busy? false))
     :fx [(when apply-changes? [:dispatch [:rd.inspector.event/dequeue]])]}))

(defn- set-search-text
  [db [_ search-text]]
  (assoc db :rd.inspector/search-text search-text))

(defn- clear-selected-path
  [db _]
  (assoc db
         :rd.inspector/selected-path []
         :rd.inspector/selected-path-error? false))

(defn- clear-events
  [db _]
  (assoc db :rd.inspector/events '()))

(defn- toggle-recording
  [db _]
  (update db :rd.inspector/recording? #(not %)))

(defn- set-connection-state
  [db [_ connection-state]]
  (assoc db :rd.inspector/connected?
         (if (= "connected" connection-state)
           true
           false)))

(defn- toggle-selected-path-editable?
  [db _]
  (update db :rd.inspector/selected-path-editable? #(not %)))

(defn- update-selected-path
  [db [_ idx]]
  (-> (update db :rd.inspector/selected-path #(-> (inc idx) (take %) vec))
      (assoc :rd.inspector/search-text "")))

(defn- set-selected-path
  [db [_ selected-path]]
  (try
    (if (string/blank? selected-path)
      (assoc db :rd.inspector/selected-path-error? false)
      (let [selected-path' (r/read-string selected-path)]
        (if (vector? selected-path')
          (assoc db
                 :rd.inspector/selected-path selected-path'
                 :rd.inspector/selected-path-error? false)
          (assoc db :rd.inspector/selected-path-error? true))))
    (catch dynamic _e
      (assoc db :rd.inspector/selected-path-error? true))))

(defn- update-selected-path-coll
  [db [_ id]]
  (-> (update db :rd.inspector/selected-path #(-> % vec (conj id)))
      (assoc :rd.inspector/search-text "")))

(defn- apply-settings
  [db [_ settings]]
  (assoc db :rd.inspector/settings settings))

(defn- initialize-db
  [_ _]
  {:rd.inspector/recording? false
   :rd.inspector/connected? false
   :rd.inspector/selected-path []
   :rd.inspector/selected-path-editable? false
   :rd.inspector/settings {:rd.inspector.setting/max-events 50
                           :rd.inspector.setting/hide-events-with-no-diff? false}})

(defn register-workers-event
  [{:keys [db]} [_ {:keys [worker-count] :as args}]]
  (let [workers (->> (for [id (range worker-count)]
                       [id {:worker-id id
                            :busy?     false
                            :worker    (worker/createWorker)}])
                     (into {}))]

    {:db                               (assoc db :rd.inspector/workers workers)
     :rd.inspector.fx/register-workers (assoc args :workers workers)}))


(defn register-workers-fx
  [{:keys [^utils/AutoDisposeMixin parent workers]}]
  (run! (fn [[worker-id {:keys [^web/Worker worker]}]]
          (.autoDisposeStreamSubscription
            parent
            (-> worker .-onMessage
                (.listen #(rd/dispatch [:rd.inspector/handle-worker-event
                                        {:worker-id worker-id
                                         :data      (some-> % .-data r/read-string)}])))))
        workers))

(defn delegate-to-worker-fx
  [{:keys [data ^web/Worker worker]}]
  (.postMessage worker (pr-str data)))

(defn register!
  []

  (rd/reg-sub :rd.inspector/db :-> :rd.inspector/db)
  (rd/reg-sub :rd.inspector/selected-path :-> :rd.inspector/selected-path)
  (rd/reg-sub :rd.inspector/selected-path-error? :-> :rd.inspector/selected-path-error?)
  (rd/reg-sub :rd.inspector/selected-path-editable? :-> :rd.inspector/selected-path-editable?)
  (rd/reg-sub :rd.inspector/search-text :-> :rd.inspector/search-text)
  (rd/reg-sub :rd.inspector/recording? :-> :rd.inspector/recording?)
  (rd/reg-sub :rd.inspector/connected? :-> :rd.inspector/connected?)
  (rd/reg-sub :rd.inspector/events :-> :rd.inspector/events)
  (rd/reg-sub :rd.inspector/settings :-> :rd.inspector/settings)

  (rd/reg-event-db :rd.inspector/initialize-db initialize-db)

  (rd/reg-event-db :rd.inspector/set-search-text set-search-text)

  (rd/reg-event-db :rd.inspector/apply-settings apply-settings)

  (rd/reg-event-db :rd.inspector/update-selected-path update-selected-path)
  (rd/reg-event-db :rd.inspector/update-selected-path-coll update-selected-path-coll)
  (rd/reg-event-db :rd.inspector/set-selected-path set-selected-path)
  (rd/reg-event-db :rd.inspector/clear-selected-path clear-selected-path)
  (rd/reg-event-db :rd.inspector/toggle-selected-path-editable? toggle-selected-path-editable?)

  (rd/reg-event-db :rd.inspector/clear-events clear-events)

  (rd/reg-event-db :rd.inspector/toggle-recording toggle-recording)
  (rd/reg-event-db :rd.inspector/set-connection-state set-connection-state)

  (rd/reg-event-fx :rd.inspector/handle-app-event handle-app-event)
  (rd/reg-event-fx :rd.inspector/handle-worker-event handle-worker-event)

  (rd/reg-event-fx :rd.inspector.event/register-workers register-workers-event)
  (rd/reg-fx :rd.inspector.fx/register-workers register-workers-fx)

  (rd/reg-fx :rd.inspector.fx/delegate-to-worker delegate-to-worker-fx)

  (rd/reg-event-fx :rd.inspector.event/dequeue dequeue-event)
  (rd/reg-fx :rd.inspector.fx/enqueue enqueue))
