(ns hti.re-dash-inspector.main
  (:require ["package:flutter/material.dart" :as m]
            ["package:devtools_extensions/devtools_extensions.dart" :as ext]
            ["package:devtools_app_shared/service.dart" :as service]
            ["package:devtools_app_shared/ui.dart" :as ui]
            ["package:devtools_app_shared/utils.dart" :as utils]
            ["package:vm_service/vm_service.dart" :as vm-service]
            ["dart:async" :as async]
            [cljd.flutter :as f]
            [cljd.reader :as r]
            [clojure.string :as string]))

(defn- defer
  "Defers execution of the given function `f` until the next event loop."
  [f]
  (async/Timer.run f))

(defn- search-filter
  "Searches all keys and values containing the search text."
  [[k v] search-text]
  (if search-text
    (or (-> (pr-str k)
            string/lower-case
            (string/includes? search-text))
        (-> (pr-str v)
            string/lower-case
            (string/includes? search-text)))
    true))

(def data-table
  "The data for the selected search / filter"
  (f/widget

    :get {state :state}

    :watch [{:keys [db selected-path search-text]} state

            dark-mode? (some-> ^ext/ExtensionManager
                               (get utils/globals ext/ExtensionManager)
                               .-darkThemeEnabled)

            color-scheme (atom (if dark-mode?
                                 ui/darkColorScheme
                                 ui/lightColorScheme))

            ;; Narrow down the db map to only what's been selected
            ;; (eg. when the user selected a nested map value from the ui)
            db' (atom (if (seq selected-path)
                        (get-in db selected-path)
                        db))

            ;; The filtered & sorted list of map entries
            ;; to display on the ui
            items (->> db'
                       (into [])
                       (filter #(search-filter % search-text))
                       (sort-by (fn [[k _]] k))
                       atom)]

    m/Expanded
    (m/ListView.builder
      .itemCount (count items)
      .itemBuilder
      (f/build
        [idx]
        (let [[k v] (get items idx)]
          (f/widget
            (m/Container
              .color (ui/alternatingColorForIndex idx color-scheme))
            (m/Row
              .crossAxisAlignment m/CrossAxisAlignment.center
              .children
              [(f/widget
                 (m/Flexible .fit m/FlexFit.tight)
                 (m/Text (or (pr-str k) "")))
               (m/SizedBox .width 10)
               (f/widget
                 (m/Expanded .flex 2)
                 (m/InkWell
                   .onTap (fn []
                            (when (and (map? v)
                                       (or (keyword k)
                                           (string? k)))
                              (swap! state (fn [s]
                                             (-> (update s :selected-path #(-> % vec (conj k)))
                                                 (assoc :search-text ""))))))
                   .mouseCursor (if (map? v)
                                  m/WidgetStateMouseCursor.clickable
                                  m/SystemMouseCursors.basic))
                 (m/Text (or (pr-str v) "")
                         .maxLines 1000
                         .overflow m/TextOverflow.ellipsis))])))))))


(def breadcrumbs
  "When selecting an item from the table,
  breadcrumbs will show the way back."
  (f/widget
    :get {state :state}
    :watch [{:keys [selected-path]} state]
    :when (seq selected-path)
    (m/Align
      .alignment m/Alignment.centerLeft)
    (m/Column
      .children
      [(f/widget
         (m/Wrap
           .children
           (concat
             [(f/widget
                (m/InkWell
                  .onTap (fn []
                           (swap! state assoc :selected-path [])))
                (m/Text "/ root"))]
             (map-indexed
               (fn [idx crumb]
                 (f/widget
                   (m/InkWell
                     .onTap (fn []
                              (swap! state update :selected-path
                                     #(take (inc idx) %))))
                   (m/Container
                     .constraints (m/BoxConstraints .maxWidth 1000))
                   (m/Text (str " / " (pr-str crumb))
                           .overflow m/TextOverflow.ellipsis)))
               selected-path))))
       (m/SizedBox .height 10)])))


(def search
  (f/widget
    :get {state             :state
          search-controller :search-controller}
    (ui/DevToolsClearableTextField
      .labelText "Search database.."
      .prefixIcon (m/Icon (m/Icons.search))
      .onChanged #(swap! state assoc :search-text %)
      .controller search-controller)))


(def header
  (ui/AreaPaneHeader
    .title (m/Text "re-dash Inspector")))

(def footer
  (f/widget
    :context ctx
    ui/RoundedOutlinedBorder
    (m/Padding .padding (m/EdgeInsets.all 2))
    (m/Row
      .mainAxisAlignment m/MainAxisAlignment.center
      .children
      [(m/Text "Find re-dash useful? Consider donating via ")
       (m/Text.rich
         (ui/LinkTextSpan
           .link (ui/Link
                   .display "Github Sponsors"
                   .url "https://github.com/sponsors/htihospitality")
           .context ctx))])))


(defn main
  []
  (f/run

    ext/DevToolsExtension

    (f/widget

      :managed [search-controller (m/TextEditingController)]

      :let [state (atom {})]

      :bind {:state             state
             :search-controller search-controller}

      :watch [;; Wait for the vm service to be available
              ^vm-service/VmService? vm-service
              (-> ^service/ServiceManager (get utils/globals service/ServiceManager)
                  .-onServiceAvailable
                  await)

              ;; Listen for new events from the connected app
              ^vm-service/Event? event (when vm-service (.-onExtensionEvent vm-service))

              ;; React to new events.
              ;; We're only interested in events of a specific kind.
              ;; Reset the db atom to the new deserialized (from edn) value
              _ (when (and event (= "ext.re-dash" (.-extensionKind event)))
                  (when-let [data (some-> event .-extensionData .-data)]
                    (when-let [db (get data "db")]
                      (defer #(swap! state assoc :db (r/read-string db))))))]


      (m/Column
        .children
        [header
         (m/SizedBox .height 10)
         search
         (m/SizedBox .height 10)
         breadcrumbs
         data-table
         (m/SizedBox .height 10)
         footer]))))
