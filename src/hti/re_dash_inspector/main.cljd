(ns hti.re-dash-inspector.main
  (:require
   ["package:devtools_app_shared/service.dart" :as service]
   ["package:devtools_app_shared/utils.dart" :as utils]
   ["package:devtools_extensions/devtools_extensions.dart" :as ext]
   ["package:flutter/material.dart" :as m]
   ["package:vm_service/vm_service.dart" :as vm-service]
   ["package:web/web.dart" :as web]
   [cljd.flutter :as f]
   [hti.re-dash-inspector.breadcrumbs :as breadcrumbs]
   [hti.re-dash-inspector.footer :as footer]
   [hti.re-dash-inspector.inspector :as inspector]
   [hti.re-dash-inspector.recorder :as recorder]
   [hti.re-dash-inspector.search :as search]
   [hti.re-dash-inspector.model :as model]
   [hti.re-dash.core :as rd]
   [cljd.reader :as r]))

(defn- app-event?
  [{:flds [extensionKind timestamp] :as ^vm-service/Event _}
   subscribed-at]

  (if (and

        ;; Ensure we're dealing with an event from re-dash
        (#{"re-dash"} extensionKind)

        ;; Ensure we're only looking at events emitted since we subscribed.
        ;; This should've been the default case as a broadcast stream
        ;; is only supposed to receive new events since subscription,
        ;; alas, for some reason the Extension Stream of the VM resends past events.
        (>= timestamp subscribed-at))
    true false))

(defn view
  [^utils/AutoDisposeMixin parent]
  (f/widget

    :managed [search-controller (m/TextEditingController)
              path-controller (m/TextEditingController)]

    :let [service-manager
          ^service/ServiceManager
          (get utils/globals service/ServiceManager)]

    :bind {:search-controller search-controller
           :path-controller   path-controller}

    :watch [;; Start the background web worker
            _ (let [worker (web/Worker "/worker/out/worker.js")]

                (utils/setGlobal web/Worker worker)

                (.autoDisposeStreamSubscription
                  parent
                  (-> worker .-onMessage
                      (.listen #(rd/dispatch [:rd.inspector/handle-worker-event
                                              (some-> % .-data r/read-string)]))))

                nil)

            ;; Wait for the vm service to be available
            ^vm-service/VmService? vm-service
            (-> service-manager .-onServiceAvailable await)

            ;; Without setting this flag, every time the app
            ;; hot restarts, then the isolate is paused
            _ (when vm-service
                (.setFlag vm-service "pause_isolates_on_start" "false"))

            ;; Subscribe to post events from re-dash.
            ;; The reason we keep reference to and auto
            ;; dispose of the StreamSubscription as opposed to
            ;; merely :watch on the stream, is because this way
            ;; the subscription doesn't pause when the devtools window is
            ;; out of focus, which would otherwise cause us to lose events
            ;; sent from the app.
            _ (when vm-service
                (.cancelStreamSubscriptions parent)
                (.autoDisposeStreamSubscription
                  parent
                  (let [subscribed-at (-> (DateTime/now) .-millisecondsSinceEpoch)]
                    (-> vm-service
                        .-onExtensionEvent
                        (.where #(app-event? % subscribed-at))
                        (.listen #(rd/dispatch [:rd.inspector/handle-app-event %])))))
                nil)


            ;; Wait for the connected app's main isolate
            ;; {:flds [id] :as ^vm-service/IsolateRef? _}
            ;; (when vm-service
            ;;   (-> service-manager .-isolateManager .-mainIsolate))

            ;; Set the pause mode in the debugger to none to try and guard
            ;; against pausing when doing a hot restart of the app
            ;; TODO
            ;; This does not really seem to help in preventing a pause
            ;; when doing a hot restart of the app, so this can possibly
            ;; be removed at some stage.
            ;; _ (when id
            ;;     (.setIsolatePauseMode
            ;;       vm-service id
            ;;       .exceptionPauseMode "None"
            ;;       .shouldPauseOnExit false))

            ;; ;; Listen for isolate pause events
            ;; {:flds [kind] :as ^vm-service/Event? _}
            ;; (when id (.getIsolatePauseEvent vm-service id))

            ;; When we detect a pause event, we un-pause to try and guard
            ;; against inadvertent pausing when doing a hot restart of the app.
            ;; TODO
            ;; This does mean we cannot pause the app in the debugger at all
            ;; so ideally we need to determine why a hot restart pauses the isolate?
            ;; Additionally, due to the undesirable pause when the app restarts,
            ;; there lingers a weird paused notification in the devtools window that
            ;; does not seem to affect anything, but it does not automatically
            ;; disappear either - a refresh of devtools does get rid of it though.
            ;; _ (when (= "PauseStart" kind)
            ;;     (.resume vm-service id))
            ]

    (m/DefaultTabController .length 2)

    (m/Column
      .children
      [(m/TabBar
         .isScrollable true
         .tabs
         [(m/Tab .text "Inspector")
          (m/Tab .text "Recorder")])
       (m/SizedBox .height 5)
       search/view
       (m/SizedBox .height 5)
       breadcrumbs/view
       (f/widget
         m/Expanded
         (m/TabBarView
           .children
           [inspector/view
            recorder/view]))
       (m/SizedBox .height 3)
       footer/view])))

(defn main
  []

  (m/WidgetsFlutterBinding.ensureInitialized)

  (model/register!)

  (await (rd/dispatch-sync [:rd.inspector/initialize-db]))

  (f/run

    ext/DevToolsExtension

    ;; We reify StatefulWidget so we can use
    ;; AutoDisposeMixin to auto dispose
    ;; our event stream subscription.

    (reify :extends m/StatefulWidget
      :no-meta true
      (createState [_]
        (reify :extends m/State
          :no-meta true

          (build [this _ctx]
            (view this))

          ^:mixin utils/AutoDisposeMixin
          (autoDisposeStreamSubscription [_this _sub]))))))
