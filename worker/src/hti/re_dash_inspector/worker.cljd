(ns hti.re-dash-inspector.worker
  (:require ["dart:html" :as html]
            [clojure.data :as data]
            [cljd.reader :as r]
            [clojure.walk :as w]))

(defn sanitize
  [m]
  (w/postwalk
    (fn [element]
      (if (map-entry? element)
        (let [[key val] element]
          [key

           (cond

             ;; Empty maps behave weirdly when doing clojure.data/diff
             ;; Here we merely reset them to {}
             (and (map? val) (empty? val)) {}

             ;; Empty lists behave weirdly when doing clojure.data/diff
             ;; Here we merely reset them to '()
             (and (list? val) (empty? val)) '()

             :else val)])
        element))
    m))


(defn main
  []

  ;; TODO
  ;; Ideally we'd want to use the Web package here instead of dart:html
  ;; but as of writing there's no way to get a reference to the global scope
  ;; see: https://stackoverflow.com/questions/78566237/accessing-workerglobalscope-instance-in-web-worker-using-packageweb

  (let [worker (.-instance html/DedicatedWorkerGlobalScope)]
    (-> worker .-onMessage
        (.listen (fn [^html/MessageEvent m]
                   (let [{event-id     :rd.inspector.event/id
                          event-number :rd.inspector.event/number
                          db-before    :rd.inspector.event/db-before
                          db-after     :rd.inspector.event/db-after}
                         (some-> m .-data r/read-string)]

                     (.postMessage worker (-> {:rd.inspector.event/id     event-id
                                               :rd.inspector.event/number event-number
                                               :rd.inspector.event/diff   (->> (data/diff (sanitize db-before)
                                                                                          (sanitize db-after))
                                                                               (take 2))}
                                              prn-str))))))))
