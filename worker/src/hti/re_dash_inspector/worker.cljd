(ns hti.re-dash-inspector.worker
  (:require ["package:web/web.dart" :as web]
            ["worker.dart" :as worker]
            [clojure.data :as data]
            [cljd.reader :as r]
            [clojure.walk :as w]))

(defn sanitize
  [m]
  (w/postwalk
    (fn [element]
      (if (map-entry? element)
        (let [[key val] element]
          [key

           (cond

             ;; Empty maps behave weirdly when doing clojure.data/diff
             ;; Here we merely reset them to {}
             (and (map? val) (empty? val)) {}

             ;; Empty lists behave weirdly when doing clojure.data/diff
             ;; Here we merely reset them to '()
             (and (list? val) (empty? val)) '()

             :else val)])
        element))
    m))


(defn main
  []

  ;; TODO
  ;; Doesn't work yet because the listener function (callback) being passed
  ;; in is not a subtype of JavaScriptFunction and not sure how to convert?

  ;; In native dart we're able to reference the DedicatedWorkerGlobalScope, that's why
  ;; we divert to the `worker` dart file.
  ;; See: https://github.com/dart-lang/web/issues/251

  (let [worker (worker/getWorkerGlobalScope)]
    (worker/listen
     (fn [m]
       (let [{event-id     :rd.inspector.event/id
              event-number :rd.inspector.event/number
              db-before    :rd.inspector.event/db-before
              db-after     :rd.inspector.event/db-after}
             (some-> m .-data r/read-string)]

         (.postMessage worker (-> {:rd.inspector.event/id     event-id
                                   :rd.inspector.event/number event-number
                                   :rd.inspector.event/diff   (->> (data/diff (sanitize db-before)
                                                                              (sanitize db-after))
                                                                   (take 2))}
                                  prn-str)))))))
