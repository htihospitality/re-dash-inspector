(ns hti.re-dash-inspector.worker
  (:require ["package:web/web.dart" :as web]
            ["dart:js_interop" :as js_interop]
            ["worker.dart" :as worker]
            [clojure.data :as data]
            [cljd.reader :as r]
            [clojure.walk :as w]))

(defn- sanitize
  [m]
  (w/postwalk
    (fn [element]
      (if (map-entry? element)
        (let [[key val] element]
          [key

           (cond

             ;; Empty maps behave weirdly when doing clojure.data/diff
             ;; Here we merely reset them to {}
             (and (map? val) (empty? val)) {}

             ;; Empty lists behave weirdly when doing clojure.data/diff
             ;; Here we merely reset them to '()
             (and (list? val) (empty? val)) '()

             :else val)])
        element))
    m))

(defn- js-fn 
  [^#/(web/MessageEvent -> void) f]
  (let [f f]
    (-> f js_interop/FunctionToJSExportedDartFunction .-toJS)))

(defn- js-str
  [s]
  (-> s js_interop/StringToJSString .-toJS))

(defn main
  []

  ;; In native dart we're able to reference the DedicatedWorkerGlobalScope, that's why
  ;; we divert to the `worker` dart file.
  ;; See: https://github.com/dart-lang/web/issues/251
  
  (-> (fn [^web/MessageEvent m]

        ;; Without this pr-str, we get an error when accessing the data property of the MessageEvent:
        ;; TypeError: m$1.get$data is not a function
        ;; ¯\_(ツ)_/¯
        (pr-str m)

        (let [data (.-data ^web/MessageEvent m)

              {event-id     :rd.inspector.event/id
               event-number :rd.inspector.event/number
               db-before    :rd.inspector.event/db-before
               db-after     :rd.inspector.event/db-after}
              (some-> data r/read-string)]

          (.postMessage ^web/DedicatedWorkerGlobalScope (worker/getWorkerGlobalScope)
                        (-> {:rd.inspector.event/id     event-id
                             :rd.inspector.event/number event-number
                             :rd.inspector.event/diff   (->> (data/diff (sanitize db-before)
                                                                        (sanitize db-after))
                                                             (take 2))}
                            pr-str
                            js-str))))
      js-fn
      worker/listen))
